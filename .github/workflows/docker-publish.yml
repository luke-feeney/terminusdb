name: Publish

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - dev
      - canary
      - rc
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  TERMINUSDB_STORE_PROLOG_VERSION: v0.13.5

jobs:
  test_and_push_docker:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: terminusdb/terminusdb-server
      DOCKER_ENVS: "-e TERMINUSDB_SERVER_JWT_PUBLIC_KEY_PATH=test/public_key_test.key.pub -e TERMINUSDB_SERVER_JWT_PUBLIC_KEY_ID=testkey -e TERMINUSDB_HTTPS_ENABLED=false --name terminusdb"


    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Run tests
        run: docker run $DOCKERENVS terminusdb/terminusdb-server:latest bash -c "swipl -g halt /app/terminusdb/start.pl store init --key root && swipl -g run_tests -g halt /app/terminusdb/start.pl -O"

      - name: Copy binary to local filesystem
        run: |
          id=$(docker create terminusdb/terminusdb-server)
          docker cp $id:/app/terminusdb/terminusdb terminusdb
          docker rm -v $id

      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: terminusdb-linux
          path: terminusdb

      - name: Log into Docker Container Registry
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u terminusdb --password-stdin

      - name: Push image to Docker Container Registry
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  fedora_bin:
    runs-on: ubuntu-latest
    needs: test_and_push_docker
    steps:
      - uses: actions/checkout@v2
      - run: sudo docker run --name=fedora -v $(pwd):/app/terminusdb ghcr.io/terminusdb/terminus_store_prolog/terminus_store_prolog_fedora:latest bash -c "cd /app/terminusdb && make bin"
      - run: sudo docker cp fedora:/app/terminusdb/terminusdb fedora-bin
      - name: Upload rpm Artifact
        uses: actions/upload-artifact@v2.1.4
        with:
            name: terminusdb-fedora-bin
            path: fedora-bin

  deb_and_rpm:
    runs-on: ubuntu-latest
    needs: [test_and_push_docker, fedora_bin]
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: terminusdb-linux

    - run: chmod +x terminusdb

    - uses: actions/download-artifact@v2
      with:
        name: terminusdb-fedora-bin

    - run: sudo apt install rpm && sudo gem install --no-document fpm

    - run: make deb

    - name: Upload deb Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: terminusdb-deb
        path: terminusdb*.deb

    - name: Rename fedora bin and give executable permissions
      run: mv fedora-bin terminusdb && chmod +x terminusdb

    - run: make rpm

    - name: Upload rpm Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: terminusdb-rpm
        path: terminusdb*.rpm

    - name: Upload to bintray repo
      run: |
          BRANCH=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(grep 'VERSION=' Makefile | sed 's/VERSION=//g')
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")

          if [ $(echo "${{ github.ref }}" | grep "tag") ]; then
            curl -T terminusdb*.deb -u "rrooij:${{ secrets.BINTRAY_API_TOKEN }}" "https://api.bintray.com/content/terminusdb/terminusdb-production-deb/terminusdb/${VERSION}/pool/main/t/terminusdb-${VERSION}_amd64.deb;deb_distribution=buster,bullseye,groovy,focal,bionic;deb_component=main;deb_architecture=amd64?publish=1"
          fi
          # Upload to dev/canary/rc/production repo
          if [ $(echo "$BRANCH" | grep -P "dev|canary|rc") ]; then
            curl -T terminusdb*.deb -u "rrooij:${{ secrets.BINTRAY_API_TOKEN }}" "https://api.bintray.com/content/terminusdb/terminusdb-${BRANCH}-deb/terminusdb/${VERSION}-${GIT_HASH}/pool/main/t/terminusdb-${VERSION}-${GIT_HASH}_amd64.deb;deb_distribution=buster,bullseye,groovy,focal,bionic;deb_component=main;deb_architecture=amd64?publish=1"
          fi


  appimage:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        sudo apt-add-repository ppa:swi-prolog/stable -y
        sudo apt-get update -y
        sudo apt-get install swi-prolog-nox libpcre3 -y

    - name: Create appimage
      run: |
        cd distribution/appimage
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        ./build_script.sh "$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')" "$TERMINUSDB_STORE_PROLOG_VERSION"
        mv "TerminusDB-$(echo $GITHUB_SHA | cut -c 1-7)-x86_64.AppImage" TerminusDB-amd64.AppImage

    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: TerminusDB-amd64.AppImage
        path: distribution/appimage/TerminusDB-amd64.AppImage

  windows:
    runs-on: windows-latest
    env:
      TERMINUSDB_SERVER_PACK_DIR: C:\Program Files\swipl\pack
      TERMINUSDB_HTTPS_ENABLED: false

    steps:
    - uses: actions/checkout@v2

    - name: Install SWI Prolog
      run: choco install swi-prolog

    - name: Download Windows requirements
      run: |
        $SWI_INSTALL_DIR="C:\Program Files\swipl"
        cd "$SWI_INSTALL_DIR"
        ls
        mkdir pack && cd pack
        git clone https://github.com/terminusdb/terminus_store_prolog.git
        cd terminus_store_prolog
        git checkout $env:TERMINUSDB_STORE_PROLOG_VERSION
        md lib/x64-win64 -ea 0
        Invoke-WebRequest -Uri "https://github.com/terminusdb/terminus_store_prolog/releases/download/$env:TERMINUSDB_STORE_PROLOG_VERSION/libterminus_store.dll" -OutFile lib/x64-win64/libterminus_store.dll
        cd "$env:GITHUB_WORKSPACE"
        mkdir swipl
        xcopy /E /q "$SWI_INSTALL_DIR" swipl\
        cd swipl\bin

    - name: Package windows tar
      run: |
        mkdir extracted && tar.exe --exclude=extracted/terminusdb_windows.tar.gz -a -c -f extracted\terminusdb_windows.tar.gz *

    - name: Run tests
      run: |
        swipl\bin\swipl -g halt start.pl store init --key root
        swipl\bin\swipl -g run_tests -g halt start.pl

    - name: Archive production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: TerminusDB-server-windows.tar.gz
        path: extracted\terminusdb_windows.tar.gz


  windows_desktop:
    runs-on: windows-latest
    needs: windows

    steps:
    - uses: actions/checkout@v2


    - uses: actions/download-artifact@v2
      with:
        name: TerminusDB-server-windows.tar.gz

    - run: |
        cd distribution/desktop
        mkdir public/windows
        cd public/windows
        tar xf ../../../../terminusdb_windows.tar.gz
        cd ../../
        npm i
        npx electron-builder build -p never
        for file in dist/TerminusDB\ Setup*.exe; do mv "$file" "dist/terminusdb-desktop Setup.exe"; done
      shell: bash

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: "terminusdb-desktop Setup.exe"
        path: "distribution/desktop/dist/terminusdb-desktop Setup.exe"


  linux_desktop:
    runs-on: ubuntu-latest
    needs: appimage
    defaults:
      run:
        working-directory: distribution/desktop

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 12
      uses: actions/setup-node@v1
      with:
        node-version: 12

    - run: npm install

    - uses: actions/download-artifact@v2
      with:
        name: TerminusDB-amd64.AppImage
        path: distribution/desktop/public

    - run: chmod +x public/TerminusDB-amd64.AppImage

    - run: |
        npx electron-builder build --linux appimage -p never
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        mv dist/*.AppImage dist/terminusdb-desktop.AppImage


    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: terminusdb-desktop.AppImage
        path: distribution/desktop/dist/terminusdb-desktop.AppImage

  mac_os_desktop:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: distribution/desktop
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 12
      uses: actions/setup-node@v1
      with:
        node-version: 12

    - run: npm install

    - name: Compile DMG
      run: |
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        bash ../mac/build_mac_os.sh "$TERMINUSDB_STORE_PROLOG_VERSION" "$TAG"
        mv dist/*.dmg dist/terminusdb-desktop.dmg

    - name: Run tests
      run: |
        export TERMINUSDB_SERVER_PACK_DIR=./public/pack
        public/SWI-Prolog.app/Contents/MacOS/swipl -g halt public/terminusdb-server/start.pl store init --key root
        public/SWI-Prolog.app/Contents/MacOS/swipl -g run_tests -g halt public/terminusdb-server/start.pl

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: terminusdb-desktop.dmg
        path: distribution/desktop/dist/terminusdb-desktop.dmg

  deploy:
    runs-on: ubuntu-latest
    needs: [test_and_push_docker, appimage, windows, windows_desktop, linux_desktop, mac_os_desktop]
    if: ${{ github.event_name != 'pull_request' && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/master' }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Rename terminusdb binary
      run: |
        mv terminusdb-linux/terminusdb terminusdb-linux-amd64

    - name: Set release name
      id: release_name
      run: |
        SUFFIX=""
        if echo "$GITHUB_REF" | grep -P "canary|rc" ; then SUFFIX="-tag"; fi
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        TAG_WITH_SUFFIX="$TAG$SUFFIX"
        echo "::set-output name=tag::$TAG_WITH_SUFFIX"

    - name: Delete tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
      continue-on-error: true

    - name: Create a Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        prerelease: ${{ !contains(github.ref, 'tags') }}
        files: |
          terminusdb-desktop Setup.exe/terminusdb-desktop Setup.exe
          terminusdb-desktop.AppImage/terminusdb-desktop.AppImage
          TerminusDB-amd64.AppImage/TerminusDB-amd64.AppImage
          TerminusDB-server-windows.tar.gz/terminusdb_windows.tar.gz
          terminusdb-desktop.dmg/terminusdb-desktop.dmg
          terminusdb-linux-amd64
          terminusdb-deb/terminusdb*.deb
